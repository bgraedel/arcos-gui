name: tests

on:
  push:
    branches:
      - main
      - npe2
    tags:
      - "v*" 
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9]
        ld_libpath: ["export LD_LIBRARY_PATH=$(python -m rpy2.situation LD_LIBRARY_PATH):${LD_LIBRARY_PATH}"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.1.2'
      - run: Rscript -e 'print("r installed")'

      - uses: tlambert03/setup-qt-libs@v1

      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 git://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: install devtools dependencies mac
        if: runner.os == 'macOS'
        run: |
          brew install openssl

      - name: install devtools dependencies ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev
          sudo apt install -y r-base-dev

      - name: install required_packages
        run: |
          sudo Rscript install_r_packages.r dplyr lazyeval data.table devtools
          sudo Rscript install_ARCOS.r

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools tox tox-gh-actions

      - name: Test with tox
        run: |
          ${{ matrix.ld_libpath }}
          tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*
