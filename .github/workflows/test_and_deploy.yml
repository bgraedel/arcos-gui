name: tests

on:
  push:
    branches:
      - main
      - npe2
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 git://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      # Install from latest CRAN binary build for Mac OS
      - name: install R, osx
        if: runner.os == 'macos-latest'
        run: |
          wget https://cloud.r-project.org/bin/macosx/R-latest.pkg -O /tmp/R-latest.pkg
          echo "Installing OS X binary package for R"
          sudo installer -pkg "/tmp/R-latest.pkg" -target /
          rm "/tmp/R-latest.pkg"
          brew install openssl

      # Install from latest CRAN binary build for linux
      - name: install R, linux
        if: runner.os == 'ubuntu-latest'
        run: |
          sudo apt-key adv \
            --keyserver keyserver.ubuntu.com \
            --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
          sudo add-apt-repository \
            --yes \
            "deb https://cloud.r-project.org/bin/linux/ubuntu/ $(lsb_release -c -s)-cran35/"
          cat /etc/apt/sources.list
          sudo apt-get update -qq
          sudo apt-get install -y r-base
          sudo apt-get install build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev
          sudo apt-get install -y r-base-dev

      - name: install R scripts
      - run: |
          sudo Rscript ./install_r_packages.r dplyr data.table devtools
          sudo Rscript ./install_ARCOS.r

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools tox tox-gh-actions

      # this runs the platform-specific tests declared in tox.ini
      - name: Test with tox
        uses: GabrielBB/xvfb-action@v1
        with:
          run: tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Coverage
        uses: codecov/codecov-action@v2

  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*
