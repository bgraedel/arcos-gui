{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"arcos-gui \u00b6 A napari plugin to detect and visualize collective signaling events Documentation: https://bgraedel.github.io/arcos-gui A utomated R ecognition of C ollective S ignalling (ARCOS) is an algorithm to identify collective spatial events in time series data, that was written by Maciej Dobrzynski (https://github.com/dmattek). It is available as an R (ARCOS) and python (arcos4py) package. ARCOS can identify and visualize collective protein activation in 2- and 3D cell cultures over time. This plugin integrates ARCOS into napari. Users can import tracked time-series data in CSV format. The plugin provides GUI elements to process this data with ARCOS. Layers containing the detected collective events are subsequently added to the viewer. Following analysis, the user can export the output as a CSV file with the detected collective events or as a sequence of images to generate a movie. Installation \u00b6 You can install arcos-gui via pip : pip install arcos-gui System Requirements \u00b6 Since version \"0.0.2\" this plugin is python native with the arcos4py package available. Demo Video \u00b6 Contributing \u00b6 Contributions are very welcome. Tests can be run with tox , please ensure the coverage at least stays the same before you submit a pull request. License \u00b6 Distributed under the terms of the BSD-3 license, \"arcos-gui\" is free and open-source software Issues \u00b6 If you encounter any problems, please file an issue along with a detailed description. Credits \u00b6 This napari plugin was generated with Cookiecutter using @napari 's cookiecutter-napari-plugin template.","title":"Home"},{"location":"#arcos-gui","text":"A napari plugin to detect and visualize collective signaling events Documentation: https://bgraedel.github.io/arcos-gui A utomated R ecognition of C ollective S ignalling (ARCOS) is an algorithm to identify collective spatial events in time series data, that was written by Maciej Dobrzynski (https://github.com/dmattek). It is available as an R (ARCOS) and python (arcos4py) package. ARCOS can identify and visualize collective protein activation in 2- and 3D cell cultures over time. This plugin integrates ARCOS into napari. Users can import tracked time-series data in CSV format. The plugin provides GUI elements to process this data with ARCOS. Layers containing the detected collective events are subsequently added to the viewer. Following analysis, the user can export the output as a CSV file with the detected collective events or as a sequence of images to generate a movie.","title":"arcos-gui"},{"location":"#installation","text":"You can install arcos-gui via pip : pip install arcos-gui","title":"Installation"},{"location":"#system-requirements","text":"Since version \"0.0.2\" this plugin is python native with the arcos4py package available.","title":"System Requirements"},{"location":"#demo-video","text":"","title":"Demo Video"},{"location":"#contributing","text":"Contributions are very welcome. Tests can be run with tox , please ensure the coverage at least stays the same before you submit a pull request.","title":"Contributing"},{"location":"#license","text":"Distributed under the terms of the BSD-3 license, \"arcos-gui\" is free and open-source software","title":"License"},{"location":"#issues","text":"If you encounter any problems, please file an issue along with a detailed description.","title":"Issues"},{"location":"#credits","text":"This napari plugin was generated with Cookiecutter using @napari 's cookiecutter-napari-plugin template.","title":"Credits"},{"location":"Contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/bgraedel/arcos-gui/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/bgraedel/arcos-gui/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible to make it easier to implement. Remember that this is a volunteer-driven project and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up arcos-gui for local development. Fork the arcos-gui repo on GitHub. Clone your fork locally git clone git@github.com:your_name_here/arcos-gui.git Install dependencies and arcos-gui: pip install napari[all] pip install -e .[testing] If you are using conda for virtual environments, consider installing tox-conda. Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: tox Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9, and 3.10. Check https://github.com/bgraedel/arcos-gui/actions and make sure that the tests pass for all supported Python versions. Deploying \u00b6 A reminder for the maintainers on how to deploy: Change version numbers in \" init .py\" and \"setup.cfg\". Make sure all your changes are committed. Create a version tag. The tag will be used as the version string for your package. make it meaningful: https://semver.org/ git tag -a v0.1.0 -m \"v0.1.0\" # make sure to use follow-tags so that the tag also gets pushed to GitHub git push --follow-tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"Contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"Contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"Contributing/#report-bugs","text":"Report bugs at https://github.com/bgraedel/arcos-gui/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"Contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"Contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"Contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/bgraedel/arcos-gui/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible to make it easier to implement. Remember that this is a volunteer-driven project and that contributions are welcome :)","title":"Submit Feedback"},{"location":"Contributing/#get-started","text":"Ready to contribute? Here's how to set up arcos-gui for local development. Fork the arcos-gui repo on GitHub. Clone your fork locally git clone git@github.com:your_name_here/arcos-gui.git Install dependencies and arcos-gui: pip install napari[all] pip install -e .[testing] If you are using conda for virtual environments, consider installing tox-conda. Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: tox Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"Contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9, and 3.10. Check https://github.com/bgraedel/arcos-gui/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"Contributing/#deploying","text":"A reminder for the maintainers on how to deploy: Change version numbers in \" init .py\" and \"setup.cfg\". Make sure all your changes are committed. Create a version tag. The tag will be used as the version string for your package. make it meaningful: https://semver.org/ git tag -a v0.1.0 -m \"v0.1.0\" # make sure to use follow-tags so that the tag also gets pushed to GitHub git push --follow-tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"Installation/","text":"Installation \u00b6 If napari is not yet installed, install it with pip : pip install napari[all] It is better to do this in a new virtual environment to avoid dependency issues. If you don't have python or pip installed checkout anaconda / miniconda or this Python installation guide which can guide you through the process. After successfully installing napari, you can install arcos-gui via pip : pip install arcos-gui This is the preferred method to install arcos-gui, as it will always install the most recent stable release. To install the most recent development version : pip install git+https://github.com/bgraedel/arcos-gui.git","title":"Installation"},{"location":"Installation/#installation","text":"If napari is not yet installed, install it with pip : pip install napari[all] It is better to do this in a new virtual environment to avoid dependency issues. If you don't have python or pip installed checkout anaconda / miniconda or this Python installation guide which can guide you through the process. After successfully installing napari, you can install arcos-gui via pip : pip install arcos-gui This is the preferred method to install arcos-gui, as it will always install the most recent stable release. To install the most recent development version : pip install git+https://github.com/bgraedel/arcos-gui.git","title":"Installation"},{"location":"Usage/","text":"Usage \u00b6 The following section shows how to use arcos-gui. Open Main Widget, Load Data, and run ARCOS \u00b6 Open Widget \u00b6 Make sure the arcos-gui and napari are installed. Open napari and dock the ARCOS main widget: Load Data \u00b6 Load and filter the data: a. Open file browser and select CSV file with data in long format. CSV file can be either comma, semicolon or tab separated. Additionally arcos-gui supports loading csv.gz files. b. Load CSV file. c. In the popup dialogue, select columns corresponding to the indicated label. For Z-coordinates, Position and Additional Filter (e.g Well) can be None if this column does not exist. Optionally mathematical operations can be performed either between columns (i.e for Ratios of fluorescent biosensors). Depending on the selection of the operation via radio buttons, an additional column can be specified as second measurement. Default is None. d. Filter input data. Parameters can be used to select track length, rescale frame interval and rescale measurement. Run ARCOS \u00b6 Select ARCOS parameters and run the algorithm. a. Change ARCOS parameters, see the ARCOS parameters section for in detail explanation. b. Update ARCOS. Will run the algorithm and generate layers. Generated Layers \u00b6 a. Detected collective event with its convex hull. b. Generated layers are: all_cells: centroid of cells with the color code representing the measurement. active cells: points represent active cells according to binarization coll cells: Points marking cells that are part of a collective event, colored by collective event id. coll event: the convex hull of collective events, colored by collective event id. Other Widgets \u00b6 Exporting Data \u00b6 Export CSV file \u00b6 The data generated by Arcos can be exported as a CSV file using the Export data widget. Can be docked in the same way as the main widget. Export Image sequence \u00b6 Images of the viewer can be exported using the Export Movie button. The option automatically determines the correct viewer size and will try to automatically fit the data into the viewer. Timestamp \u00b6 Timestamps can be added with the Timestamp widget. Can be loaded just as the main widget. Timestamp options \u00b6 Options can be set using the Timestamp Options dialogue ARCOS parameters \u00b6 Measurement \u00b6 Parameters Description Interpolate Measurements If the tickbox is checked, missing values are interpolated across all columns in the input data Clip Measurements if the tickbox is checked, the measurement will be clipped according to the quantiles provided in clip low and clip high Clip Low appears if clip measurements is checked Clip High appears if clip measurements is checked Binarization \u00b6 Parameter Description Bias Method Choose de-trending method, can be runmed, lm or none Smooth K Size of the short-term median smoothing filter. Bias K Available if Bias Method is set to 'runmed', size of long term median smoothing filter polyDeg Available if Bias Method is set to 'lm', sets the degree of the polynomial for regression detrending Bin Peak Threshold Threshold for rescaling of the de-trended signal. First, a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the Bias Method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold parameter. Collective Event Detection \u00b6 Parameter Description Neighbourhood Size The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. Min Clustersize Minimum size for a cluster to be identified as a collective nPrev frames Number of previous frames to consider when tracking collective_events Filter Collective Events \u00b6 Parameter Description Min Duration Minimal duration of collective events to be selected. Total Event Size Minimal total event size. Additional \u00b6 Add Convex Hull: If checked, the convex hull is calculated for each collective event and drawn in 2d as polygons, in 3d as surfaces. If a large ammount of collective events are detected, adding polygons / surfaces can take some time. Plots \u00b6 Under the main widgets plotting tab, several types of plots can be found that describe the time-series data and collective events. Plots can be saved as images, zoomed in to display only certain areas via the plot toolbar on top of each plot. Input data statistics \u00b6 These plots help to choose appropriate parameters for Arcos and track length filtering. Plots are chosen through dropdown menus. Available plots are: Track length Histogram Measurement Density plot (kde) X-T and Y-T plot Scatterplot \u00b6 Interactive Scatterplot of duration vs size. On hover, shows collective event id, on click takes user to first frame of selected collective event and marks this event with a bounding box. Noodleplot \u00b6 Interactive Noodleplot of object id vs time. Object tracks are colored by collective event id. On hover, shows collective event id, on click takes user to first frame of selected collective event and marks this event with a bounding box. Dropdown allows choice of projection axis.","title":"Usage"},{"location":"Usage/#usage","text":"The following section shows how to use arcos-gui.","title":"Usage"},{"location":"Usage/#open-main-widget-load-data-and-run-arcos","text":"","title":"Open Main Widget, Load Data, and run ARCOS"},{"location":"Usage/#open-widget","text":"Make sure the arcos-gui and napari are installed. Open napari and dock the ARCOS main widget:","title":"Open Widget"},{"location":"Usage/#load-data","text":"Load and filter the data: a. Open file browser and select CSV file with data in long format. CSV file can be either comma, semicolon or tab separated. Additionally arcos-gui supports loading csv.gz files. b. Load CSV file. c. In the popup dialogue, select columns corresponding to the indicated label. For Z-coordinates, Position and Additional Filter (e.g Well) can be None if this column does not exist. Optionally mathematical operations can be performed either between columns (i.e for Ratios of fluorescent biosensors). Depending on the selection of the operation via radio buttons, an additional column can be specified as second measurement. Default is None. d. Filter input data. Parameters can be used to select track length, rescale frame interval and rescale measurement.","title":"Load Data"},{"location":"Usage/#run-arcos","text":"Select ARCOS parameters and run the algorithm. a. Change ARCOS parameters, see the ARCOS parameters section for in detail explanation. b. Update ARCOS. Will run the algorithm and generate layers.","title":"Run ARCOS"},{"location":"Usage/#generated-layers","text":"a. Detected collective event with its convex hull. b. Generated layers are: all_cells: centroid of cells with the color code representing the measurement. active cells: points represent active cells according to binarization coll cells: Points marking cells that are part of a collective event, colored by collective event id. coll event: the convex hull of collective events, colored by collective event id.","title":"Generated Layers"},{"location":"Usage/#other-widgets","text":"","title":"Other Widgets"},{"location":"Usage/#exporting-data","text":"","title":"Exporting Data"},{"location":"Usage/#export-csv-file","text":"The data generated by Arcos can be exported as a CSV file using the Export data widget. Can be docked in the same way as the main widget.","title":"Export CSV file"},{"location":"Usage/#export-image-sequence","text":"Images of the viewer can be exported using the Export Movie button. The option automatically determines the correct viewer size and will try to automatically fit the data into the viewer.","title":"Export Image sequence"},{"location":"Usage/#timestamp","text":"Timestamps can be added with the Timestamp widget. Can be loaded just as the main widget.","title":"Timestamp"},{"location":"Usage/#timestamp-options","text":"Options can be set using the Timestamp Options dialogue","title":"Timestamp options"},{"location":"Usage/#arcos-parameters","text":"","title":"ARCOS parameters"},{"location":"Usage/#measurement","text":"Parameters Description Interpolate Measurements If the tickbox is checked, missing values are interpolated across all columns in the input data Clip Measurements if the tickbox is checked, the measurement will be clipped according to the quantiles provided in clip low and clip high Clip Low appears if clip measurements is checked Clip High appears if clip measurements is checked","title":"Measurement"},{"location":"Usage/#binarization","text":"Parameter Description Bias Method Choose de-trending method, can be runmed, lm or none Smooth K Size of the short-term median smoothing filter. Bias K Available if Bias Method is set to 'runmed', size of long term median smoothing filter polyDeg Available if Bias Method is set to 'lm', sets the degree of the polynomial for regression detrending Bin Peak Threshold Threshold for rescaling of the de-trended signal. First, a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the Bias Method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold parameter.","title":"Binarization"},{"location":"Usage/#collective-event-detection","text":"Parameter Description Neighbourhood Size The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. Min Clustersize Minimum size for a cluster to be identified as a collective nPrev frames Number of previous frames to consider when tracking collective_events","title":"Collective Event Detection"},{"location":"Usage/#filter-collective-events","text":"Parameter Description Min Duration Minimal duration of collective events to be selected. Total Event Size Minimal total event size.","title":"Filter Collective Events"},{"location":"Usage/#additional","text":"Add Convex Hull: If checked, the convex hull is calculated for each collective event and drawn in 2d as polygons, in 3d as surfaces. If a large ammount of collective events are detected, adding polygons / surfaces can take some time.","title":"Additional"},{"location":"Usage/#plots","text":"Under the main widgets plotting tab, several types of plots can be found that describe the time-series data and collective events. Plots can be saved as images, zoomed in to display only certain areas via the plot toolbar on top of each plot.","title":"Plots"},{"location":"Usage/#input-data-statistics","text":"These plots help to choose appropriate parameters for Arcos and track length filtering. Plots are chosen through dropdown menus. Available plots are: Track length Histogram Measurement Density plot (kde) X-T and Y-T plot","title":"Input data statistics"},{"location":"Usage/#scatterplot","text":"Interactive Scatterplot of duration vs size. On hover, shows collective event id, on click takes user to first frame of selected collective event and marks this event with a bounding box.","title":"Scatterplot"},{"location":"Usage/#noodleplot","text":"Interactive Noodleplot of object id vs time. Object tracks are colored by collective event id. On hover, shows collective event id, on click takes user to first frame of selected collective event and marks this event with a bounding box. Dropdown allows choice of projection axis.","title":"Noodleplot"}]}